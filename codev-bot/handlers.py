import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from config import imgbb_uploader
from keyboards import (
    get_admin_menu, get_projects_menu, get_project_menu, 
    get_edit_project_menu, get_confirm_delete_menu, 
    get_cancel_menu, get_back_to_main_menu, get_admin_management_menu,
    get_admin_list_menu, get_admin_delete_menu, get_confirm_delete_admin_menu
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ProjectStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_project_url = State()
    waiting_for_image = State()
    editing_title = State()
    editing_description = State()
    editing_project_url = State()
    editing_image = State()

class AdminStates(StatesGroup):
    adding_admin = State()
    editing_admin = State()

router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
async def is_admin_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return await db.is_admin(user_id)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ
async def send_message_with_menu_photo(message: Message, text: str, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ menu_photo, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å"""
    menu_photo = await db.get_menu_photo()
    
    if menu_photo:
        try:
            return await message.answer_photo(
                photo=menu_photo,
                caption=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            return await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
    else:
        return await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)

async def edit_message_with_menu_photo(callback: CallbackQuery, text: str, reply_markup=None, parse_mode=None, save_message_id: bool = False, state: FSMContext = None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ menu_photo, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å"""
    menu_photo = await db.get_menu_photo()
    
    if menu_photo:
        try:
            # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
            if callback.message.photo:
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=menu_photo, caption=text, parse_mode=parse_mode),
                    reply_markup=reply_markup
                )
                if save_message_id and state:
                    await save_bot_message_id(state, callback.message.message_id)
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                await callback.message.delete()
                new_message = await callback.message.answer_photo(
                    photo=menu_photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                if save_message_id and state:
                    await save_bot_message_id(state, new_message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
            if save_message_id and state:
                await save_bot_message_id(state, callback.message.message_id)
    else:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        if save_message_id and state:
            await save_bot_message_id(state, callback.message.message_id)

async def edit_message_with_project_photo(callback: CallbackQuery, text: str, project_image_url: str = None, reply_markup=None, parse_mode=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å —Ñ–æ—Ç–æ –º–µ–Ω—é"""
    photo_url = project_image_url or await db.get_menu_photo()
    
    if photo_url:
        try:
            # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
            if callback.message.photo:
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=photo_url, caption=text, parse_mode=parse_mode),
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=photo_url,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    else:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)

async def send_progress_message(message: Message, title: str = "", description: str = "", project_url: str = "", image_status: str = "", reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    progress_text = "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
    
    if title:
        progress_text += f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
    else:
        progress_text += "‚è≥ –ù–∞–∑–≤–∞–Ω–∏–µ: _–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞_\n"
    
    if description:
        progress_text += f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description[:50]}{'...' if len(description) > 50 else ''}\n"
    elif title:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        progress_text += "‚è≥ –û–ø–∏—Å–∞–Ω–∏–µ: _–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞_\n"
    
    if project_url:
        progress_text += f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {project_url}\n"
    elif description:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
        progress_text += "‚è≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: _–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞_\n"
    
    if image_status:
        progress_text += f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_status}\n"
    elif project_url:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
        progress_text += "‚è≥ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: _–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏_\n"
    
    await send_message_with_menu_photo(
        message,
        progress_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def delete_previous_messages(message: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        bot_message_ids = data.get('bot_message_ids', [])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        for bot_message_id in bot_message_ids:
            try:
                await message.bot.delete_message(message.chat.id, bot_message_id)
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ {bot_message_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        await state.update_data(bot_message_ids=[])
    
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def save_bot_message_id(state: FSMContext, message_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    await state.update_data(bot_message_ids=[message_id])

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
    if not text:
        return text
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2 (—É–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É)
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '!']
    
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    
    if await is_admin_user(user_id):
        await send_message_with_menu_photo(
            message,
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Codev!\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏.",
            reply_markup=get_admin_menu()
        )
    else:
        await send_message_with_menu_photo(
            message,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    await edit_message_with_menu_photo(
        callback,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_menu()
    )
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
@router.callback_query(F.data == "view_projects")
async def view_projects(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    await show_projects_page(callback, page=0)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("projects_page_"))
async def view_projects_page(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    page = int(callback.data.split("_")[-1])
    await show_projects_page(callback, page)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)
@router.callback_query(F.data == "current_page")
async def current_page_handler(callback: CallbackQuery):
    await callback.answer()

async def show_projects_page(callback: CallbackQuery, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    projects = await db.get_projects()
    
    if not projects:
        await edit_message_with_menu_photo(
            callback,
            "üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç!",
            reply_markup=get_back_to_main_menu()
        )
        await callback.answer()
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: 10 –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    projects_per_page = 10
    total_pages = (len(projects) + projects_per_page - 1) // projects_per_page
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 0:
        page = 0
    elif page >= total_pages:
        page = total_pages - 1
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * projects_per_page
    end_idx = start_idx + projects_per_page
    page_projects = projects[start_idx:end_idx]
    
    await edit_message_with_menu_photo(
        callback,
        f"üìÇ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ ({len(projects)} —à—Ç.)\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}:",
        reply_markup=get_projects_menu(page_projects, page, total_pages)
    )
    
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
@router.callback_query(F.data.startswith("project_"))
async def view_project(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[1])
    project = await db.get_project(project_id)
    
    if not project:
        await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    title_escaped = escape_markdown(project['title'])
    text = f"üìÑ **{title_escaped}**\n\n"
    
    if project['description']:
        desc_escaped = escape_markdown(project['description'])
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc_escaped}\n\n"
    
    if project.get('project_url'):
        url_escaped = escape_markdown(project['project_url'])
        text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {url_escaped}\n\n"
    
    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {project['created_at'].strftime('%d.%m.%Y %H:%M')}"
    
    await edit_message_with_project_photo(
        callback,
        text,
        project_image_url=project['image_url'],
        reply_markup=get_project_menu(project_id),
        parse_mode="Markdown"
    )
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
@router.callback_query(F.data == "add_project")
async def add_project_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    await state.set_state(ProjectStates.waiting_for_title)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await edit_message_with_menu_photo(
        callback,
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown",
        save_message_id=True,
        state=state
    )
    await callback.answer()

@router.message(StateFilter(ProjectStates.waiting_for_title))
async def add_project_title(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(title=message.text)
    await state.set_state(ProjectStates.waiting_for_description)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–ø–∏—Å–∞–Ω–∏—è
    title_escaped = escape_markdown(message.text)
    progress_text = ("‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
                    f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title_escaped}\n"
                    "‚è≥ –û–ø–∏—Å–∞–Ω–∏–µ: _–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞_\n\n"
                    "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    
    bot_message = await send_message_with_menu_photo(
        message,
        progress_text,
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if hasattr(bot_message, 'message_id'):
        await save_bot_message_id(state, bot_message.message_id)

@router.message(StateFilter(ProjectStates.waiting_for_description))
async def add_project_description(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = None if message.text == "/skip" else message.text
    await state.update_data(description=description)
    await state.set_state(ProjectStates.waiting_for_project_url)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
    title_escaped = escape_markdown(data['title'])
    progress_text = ("‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
                    f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title_escaped}\n")
    
    if description:
        desc_escaped = escape_markdown(description[:50] + ('...' if len(description) > 50 else ''))
        progress_text += f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {desc_escaped}\n"
    else:
        progress_text += "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: _–ø—Ä–æ–ø—É—â–µ–Ω–æ_\n"
    
    progress_text += ("‚è≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: _–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞_\n\n"
                     "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    
    bot_message = await send_message_with_menu_photo(
        message,
        progress_text,
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    if hasattr(bot_message, 'message_id'):
        await save_bot_message_id(state, bot_message.message_id)

@router.message(StateFilter(ProjectStates.waiting_for_project_url))
async def add_project_url(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç
    project_url = None if message.text == "/skip" else message.text
    await state.update_data(project_url=project_url)
    await state.set_state(ProjectStates.waiting_for_image)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    title_escaped = escape_markdown(data['title'])
    progress_text = ("‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
                    f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title_escaped}\n")
    
    description = data.get('description')
    if description:
        desc_escaped = escape_markdown(description[:50] + ('...' if len(description) > 50 else ''))
        progress_text += f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {desc_escaped}\n"
    else:
        progress_text += "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: _–ø—Ä–æ–ø—É—â–µ–Ω–æ_\n"
    
    if project_url:
        url_escaped = escape_markdown(project_url)
        progress_text += f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: {url_escaped}\n"
    else:
        progress_text += "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: _–ø—Ä–æ–ø—É—â–µ–Ω–æ_\n"
    
    progress_text += ("‚è≥ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: _–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏_\n\n"
                     "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–æ—Ç–æ) –∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    
    bot_message = await send_message_with_menu_photo(
        message,
        progress_text,
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    if hasattr(bot_message, 'message_id'):
        await save_bot_message_id(state, bot_message.message_id)

@router.message(StateFilter(ProjectStates.waiting_for_image))
async def add_project_image(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    image_url = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ
    if message.photo and imgbb_uploader:
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            progress_message = await send_message_with_menu_photo(
                message,
                "üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode="Markdown"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ imgbb
            image_url = await imgbb_uploader.upload_from_telegram_photo(
                message.bot, 
                photo.file_id, 
                f"project_{message.from_user.id}_{photo.file_id}"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            if hasattr(progress_message, 'message_id'):
                try:
                    await message.bot.delete_message(message.chat.id, progress_message.message_id)
                except:
                    pass
                    
            if not image_url:
                await send_message_with_menu_photo(
                    message,
                    "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
    elif message.text and message.text != "/skip":
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ
        await send_message_with_menu_photo(
            message,
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∫–∞–∫ —Å—Å—ã–ª–∫—É.",
            reply_markup=get_cancel_menu(),
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    data = await state.get_data()
    
    try:
        project_id = await db.add_project(
            title=data['title'],
            description=data.get('description'),
            project_url=data.get('project_url'),
            image_url=image_url
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = "‚úÖ **–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
        result_text += f"üÜî ID: {project_id}\n"
        
        title_escaped = escape_markdown(data['title'])
        result_text += f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {title_escaped}\n"
        
        if data.get('description'):
            desc_escaped = escape_markdown(data['description'][:100] + ('...' if len(data['description']) > 100 else ''))
            result_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc_escaped}\n"
        
        if data.get('project_url'):
            url_escaped = escape_markdown(data['project_url'])
            result_text += f"üîó –°—Å—ã–ª–∫–∞: {url_escaped}\n"
            
        if image_url:
            result_text += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
        
        await send_message_with_menu_photo(
            message,
            result_text,
            reply_markup=get_back_to_main_menu(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await send_message_with_menu_photo(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.",
            reply_markup=get_back_to_main_menu()
        )
    
    await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
@router.callback_query(F.data.startswith("edit_project_") & ~F.data.startswith("edit_project_url_"))
async def edit_project_menu(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[2])
    project = await db.get_project(project_id)
    
    if not project:
        await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    title_escaped = escape_markdown(project['title'])
    await edit_message_with_menu_photo(
        callback,
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
        f"üìÑ {title_escaped}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_edit_project_menu(project_id),
        parse_mode="Markdown"
    )
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
@router.callback_query(F.data.startswith("delete_project_"))
async def delete_project_confirm(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[2])
    project = await db.get_project(project_id)
    
    if not project:
        await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    await edit_message_with_menu_photo(
        callback,
        f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
        f"üìÑ {project['title']}\n\n"
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirm_delete_menu(project_id),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.regexp(r"^confirm_delete_\d+$"))
async def delete_project_final(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[2])
    
    if await db.delete_project(project_id):
        await edit_message_with_menu_photo(
            callback,
            "‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_back_to_main_menu()
        )
    else:
        await edit_message_with_menu_photo(
            callback,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.",
            reply_markup=get_back_to_main_menu()
        )
    
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_title_"))
async def edit_title_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[2])
    await state.update_data(project_id=project_id)
    await state.set_state(ProjectStates.editing_title)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await edit_message_with_menu_photo(
        callback,
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è**\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown",
        save_message_id=True,
        state=state
    )
    await callback.answer()

@router.message(StateFilter(ProjectStates.editing_title))
async def edit_title_save(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    data = await state.get_data()
    project_id = data['project_id']
    
    if await db.update_project(project_id, title=message.text):
        title_escaped = escape_markdown(message.text)
        await send_message_with_menu_photo(
            message,
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"üìÑ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {title_escaped}",
            reply_markup=get_back_to_main_menu(),
            parse_mode="Markdown"
        )
    else:
        await send_message_with_menu_photo(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.",
            reply_markup=get_back_to_main_menu()
        )
    
    await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
@router.callback_query(F.data.startswith("edit_project_url_"))
async def edit_project_url_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[3])
    await state.update_data(project_id=project_id)
    await state.set_state(ProjectStates.editing_project_url)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await edit_message_with_menu_photo(
        callback,
        "üîó **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç:",
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown",
        save_message_id=True,
        state=state
    )
    await callback.answer()

@router.message(StateFilter(ProjectStates.editing_project_url))
async def edit_project_url_save(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    data = await state.get_data()
    project_id = data['project_id']
    
    if await db.update_project(project_id, project_url=message.text):
        url_escaped = escape_markdown(message.text)
        await send_message_with_menu_photo(
            message,
            f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {url_escaped}",
            reply_markup=get_back_to_main_menu(),
            parse_mode="Markdown"
        )
    else:
        await send_message_with_menu_photo(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.",
            reply_markup=get_back_to_main_menu()
        )
    
    await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@router.callback_query(F.data.startswith("edit_description_"))
async def edit_description_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[2])
    await state.update_data(project_id=project_id)
    await state.set_state(ProjectStates.editing_description)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await edit_message_with_menu_photo(
        callback,
        "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown",
        save_message_id=True,
        state=state
    )
    await callback.answer()

@router.message(StateFilter(ProjectStates.editing_description))
async def edit_description_save(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    data = await state.get_data()
    project_id = data['project_id']
    
    if await db.update_project(project_id, description=message.text):
        desc_escaped = escape_markdown(message.text[:100] + ('...' if len(message.text) > 100 else ''))
        await send_message_with_menu_photo(
            message,
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {desc_escaped}",
            reply_markup=get_back_to_main_menu(),
            parse_mode="Markdown"
        )
    else:
        await send_message_with_menu_photo(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.",
            reply_markup=get_back_to_main_menu()
        )
    
    await state.clear()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@router.callback_query(F.data.startswith("edit_image_"))
async def edit_image_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    project_id = int(callback.data.split("_")[2])
    await state.update_data(project_id=project_id)
    await state.set_state(ProjectStates.editing_image)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await edit_message_with_menu_photo(
        callback,
        "üñºÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–æ—Ç–æ):",
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown",
        save_message_id=True,
        state=state
    )
    await callback.answer()

@router.message(StateFilter(ProjectStates.editing_image))
async def edit_image_save(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    data = await state.get_data()
    project_id = data['project_id']
    
    image_url = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ
    if message.photo and imgbb_uploader:
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            progress_message = await send_message_with_menu_photo(
                message,
                "üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode="Markdown"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            photo = message.photo[-1]
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ imgbb
            image_url = await imgbb_uploader.upload_from_telegram_photo(
                message.bot, 
                photo.file_id, 
                f"project_edit_{project_id}_{photo.file_id}"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            if hasattr(progress_message, 'message_id'):
                try:
                    await message.bot.delete_message(message.chat.id, progress_message.message_id)
                except:
                    pass
                    
            if not image_url:
                await send_message_with_menu_photo(
                    message,
                    "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=get_back_to_main_menu(),
                    parse_mode="Markdown"
                )
                await state.clear()
                return
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await send_message_with_menu_photo(
                message,
                "‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_back_to_main_menu(),
                parse_mode="Markdown"
            )
            await state.clear()
            return
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
        await send_message_with_menu_photo(
            message,
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ.",
            reply_markup=get_cancel_menu(),
            parse_mode="Markdown"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    if await db.update_project(project_id, image_url=image_url):
        await send_message_with_menu_photo(
            message,
            "‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            "üñºÔ∏è –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.",
            reply_markup=get_back_to_main_menu(),
            parse_mode="Markdown"
        )
    else:
        await send_message_with_menu_photo(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_back_to_main_menu()
        )
    
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (—Å—É–ø–µ—Ä-—Å–µ–∫—Ä–µ—Ç–Ω–∞—è)
@router.message(Command("add_admin"))
async def add_admin_command(message: Message):
    # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –±–∞–∑–µ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤
    # –∏–ª–∏ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥–º–∏–Ω
    admin_ids = await db.get_admin_ids()
    user_id = message.from_user.id
    
    if admin_ids and user_id not in admin_ids:
        await send_message_with_menu_photo(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if args:
        try:
            new_admin_id = int(args[0])
            if await db.add_admin_id(new_admin_id):
                await send_message_with_menu_photo(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!")
            else:
                await send_message_with_menu_photo(message, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!")
        except ValueError:
            await send_message_with_menu_photo(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞
        if await db.add_admin_id(user_id):
            await send_message_with_menu_photo(message, f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω—ã!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await send_message_with_menu_photo(
                message,
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Codev!",
                reply_markup=get_admin_menu()
            )
        else:
            await send_message_with_menu_photo(message, "‚ÑπÔ∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
@router.callback_query(F.data == "cancel", StateFilter("*"))
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await back_to_main(callback)

# ================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò
# ================================

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "manage_admins")
async def manage_admins(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    admin_ids = await db.get_admin_telegram_ids()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤
    admin_list_text = ""
    if admin_ids:
        for i, admin_id in enumerate(admin_ids, 1):
            admin_list_text += f"{i}. {admin_id}\n"
    else:
        admin_list_text = "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    
    await edit_message_with_menu_photo(
        callback,
        f"üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**\n\n"
        f"üìã **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n"
        f"{admin_list_text}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_management_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
@router.callback_query(F.data == "edit_admins")
async def edit_admins(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    admin_ids = await db.get_admin_telegram_ids()
    
    if not admin_ids:
        await edit_message_with_menu_photo(
            callback,
            "‚ùå **–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    await edit_message_with_menu_photo(
        callback,
        "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_admin_list_menu(admin_ids),
        parse_mode="Markdown"
    )
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("edit_admin_"))
async def edit_admin_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    admin_index = int(callback.data.split("_")[2])
    admin_ids = await db.get_admin_telegram_ids()
    
    if admin_index >= len(admin_ids):
        await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    current_admin_id = admin_ids[admin_index]
    await state.update_data(admin_index=admin_index, current_admin_id=current_admin_id)
    await state.set_state(AdminStates.editing_admin)
    
    await edit_message_with_menu_photo(
        callback,
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        f"üìã –¢–µ–∫—É—â–∏–π ID: {current_admin_id}\n\n"
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Telegram ID:",
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown",
        save_message_id=True,
        state=state
    )
    await callback.answer()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
@router.message(StateFilter(AdminStates.editing_admin))
async def edit_admin_save(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    new_admin_id = escape_markdown(message.text.strip())
    data = await state.get_data()
    admin_index = data.get('admin_index')
    current_admin_id = data.get('current_admin_id')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
    if not new_admin_id.isdigit():
        new_message = await send_message_with_menu_photo(
            message,
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            "Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n\n"
            f"üìã –¢–µ–∫—É—â–∏–π ID: {current_admin_id}\n\n"
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID:",
            reply_markup=get_cancel_menu(),
            parse_mode="Markdown"
        )
        await save_bot_message_id(state, new_message.message_id)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    success = await db.update_admin_telegram_id(admin_index, new_admin_id)
    
    if success:
        await send_message_with_menu_photo(
            message,
            f"‚úÖ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–æ: {current_admin_id} ‚Üí {new_admin_id}",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
    else:
        await send_message_with_menu_photo(
            message,
            f"‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
    
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    await state.set_state(AdminStates.adding_admin)
    
    await edit_message_with_menu_photo(
        callback,
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_cancel_menu(),
        parse_mode="Markdown",
        save_message_id=True,
        state=state
    )
    await callback.answer()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.message(StateFilter(AdminStates.adding_admin))
async def add_admin_save(message: Message, state: FSMContext):
    if not await is_admin_user(message.from_user.id):
        await send_message_with_menu_photo(message, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(message, state)
    
    new_admin_id = escape_markdown(message.text.strip())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
    if not new_admin_id.isdigit():
        new_message = await send_message_with_menu_photo(
            message,
            "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            "Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n\n"
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID:",
            reply_markup=get_cancel_menu(),
            parse_mode="Markdown"
        )
        await save_bot_message_id(state, new_message.message_id)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–¥–º–∏–Ω
    current_admins = await db.get_admin_telegram_ids()
    if new_admin_id in current_admins:
        await send_message_with_menu_photo(
            message,
            f"‚ö†Ô∏è **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!**\n\n"
            f"ID {new_admin_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    success = await db.add_admin_telegram_id(new_admin_id)
    
    if success:
        await send_message_with_menu_photo(
            message,
            f"‚úÖ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üÜï –ù–æ–≤—ã–π –∞–¥–º–∏–Ω: {new_admin_id}",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
    else:
        await send_message_with_menu_photo(
            message,
            f"‚ùå **–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
    
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
@router.callback_query(F.data == "delete_admin")
async def delete_admin(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    admin_ids = await db.get_admin_telegram_ids()
    
    if not admin_ids:
        await edit_message_with_menu_photo(
            callback,
            "‚ùå **–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ (–Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
    if len(admin_ids) <= 1:
        await edit_message_with_menu_photo(
            callback,
            "‚ö†Ô∏è **–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í —Å–∏—Å—Ç–µ–º–µ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    await edit_message_with_menu_photo(
        callback,
        "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_delete_menu(admin_ids),
        parse_mode="Markdown"
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.regexp(r"^delete_admin_\d+$"))
async def delete_admin_confirm(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    admin_index = int(callback.data.split("_")[2])
    admin_ids = await db.get_admin_telegram_ids()
    
    if admin_index >= len(admin_ids):
        await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    admin_to_delete = admin_ids[admin_index]
    current_user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if admin_to_delete == current_user_id:
        await edit_message_with_menu_photo(
            callback,
            "‚ùå **–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è**\n\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return
    
    await edit_message_with_menu_photo(
        callback,
        f"üóëÔ∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
        f"üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_to_delete}\n\n"
        f"‚ö†Ô∏è **–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞?**\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=get_confirm_delete_admin_menu(admin_index),
        parse_mode="Markdown"
    )
    await callback.answer()

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("confirm_delete_admin_"))
async def delete_admin_final(callback: CallbackQuery):
    if not await is_admin_user(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    admin_index = int(callback.data.split("_")[3])
    admin_ids = await db.get_admin_telegram_ids()
    
    if admin_index >= len(admin_ids):
        await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    admin_to_delete = admin_ids[admin_index]
    
    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    success = await db.remove_admin_telegram_id(admin_to_delete)
    
    if success:
        await edit_message_with_menu_photo(
            callback,
            f"‚úÖ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω!**\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {admin_to_delete}\n\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admin_ids) - 1}",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
    else:
        await edit_message_with_menu_photo(
            callback,
            f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_admin_management_menu(),
            parse_mode="Markdown"
        )
    
    await callback.answer()

